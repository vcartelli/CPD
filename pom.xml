<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>it.beng</groupId>
        <artifactId>microservice-stack</artifactId>
        <version>1.9-SNAPSHOT</version>
    </parent>
    <artifactId>cpd-server</artifactId>
    <packaging>jar</packaging>
    <name>beng Modeler Server</name>
    <properties>
        <main.verticle>it.beng.modeler.microservice.ModelerConfigVerticle</main.verticle>
        <flowable.version>6.4.0</flowable.version>
        <h2.version>1.4.190</h2.version>
    </properties>
    <profiles>
        <profile>
            <id>develop</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <cpd.develop>true</cpd.develop>
                <config.properties.file>develop.properties</config.properties.file>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>production</id>
            <properties>
                <cpd.develop>false</cpd.develop>
                <config.properties.file>production.properties</config.properties.file>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker</id>
            <properties>
                <cpd.develop>false</cpd.develop>
                <config.properties.file>production.properties</config.properties.file>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.7</version>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>package</phase>
                                <configuration>
                                    <target name="copy and rename file">
                                        <copy file="src/main/deploy-bundle/web/ROOT/en/index.html" tofile="target/deploy-bundle/web/ROOT/en/docker.index.html" verbose="true" failonerror="false" />
                                        <copy file="src/main/deploy-bundle/web/ROOT/es/index.html" tofile="target/deploy-bundle/web/ROOT/es/docker.index.html" verbose="true" failonerror="false" />
                                        <copy file="src/main/deploy-bundle/web/ROOT/it/index.html" tofile="target/deploy-bundle/web/ROOT/it/docker.index.html" verbose="true" failonerror="false" />
                                        <copy file="src/main/deploy-bundle/web/ROOT/gl/index.html" tofile="target/deploy-bundle/web/ROOT/gl/docker.index.html" verbose="true" failonerror="false" />
                                        <copy file="docker/start.sh" tofile="target/deploy-bundle/start.sh" verbose="true" overwrite="true" />
                                        <copy file="docker/environment.sh" tofile="target/deploy-bundle/environment.sh" verbose="true" overwrite="true" />
                                        <copy file="docker/configure.sh" tofile="target/deploy-bundle/configure.sh" verbose="true" overwrite="true" />
                                        <copy file="docker/docker.properties" tofile="target/deploy-bundle/docker.properties" verbose="true" overwrite="true" failonerror="false" />
                                        <copy file="docker/docker.oauth2providers.json" tofile="target/deploy-bundle/docker.oauth2providers.json" verbose="true" overwrite="true" />
                                        <copy file="docker/conf/docker.cluster.xml" tofile="target/deploy-bundle/conf/docker.cluster.xml" verbose="true" overwrite="true" />
                                        <copy file="docker/conf/docker.config.json" tofile="target/deploy-bundle/conf/docker.config.json" verbose="true" overwrite="true" />
                                        <copy file="docker/web/assets/conf/docker.config.json" tofile="target/deploy-bundle/web/assets/conf/docker.config.json" verbose="true" overwrite="true" />
                                        <copy file="docker/web/assets/swagger/docker.private-API.json" tofile="target/deploy-bundle/web/assets/swagger/docker.private-API.json" verbose="true" overwrite="true" />
                                        <copy file="docker/web/swagger-ui/docker.swagger.json" tofile="target/deploy-bundle/web/swagger-ui/docker.swagger.json" verbose="true" overwrite="true" />
                                        <copy todir="target/deploy-bundle/dump" failonerror="false">
                                            <fileset dir="dump" />
                                        </copy>
                                        <copy file="db-restore.sh" tofile="target/deploy-bundle/db-restore.sh" verbose="true" />
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-verify</id>
            <properties>
                <cpd.develop>false</cpd.develop>
                <config.properties.file>production.properties</config.properties.file>
            </properties>
        </profile>
        <profile>
            <id>dev-p</id>
            <properties>
                <cpd.develop>false</cpd.develop>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <repositories>
        <repository>
            <id>beng-public</id>
            <url>http://nexus.business-engineering.it/nexus/repository/maven-public/</url>
        </repository>
    </repositories>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>it.beng</groupId>
                <artifactId>microservice-common</artifactId>
                <version>${project.parent.version}</version>
                <scope>compile</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>it.beng</groupId>
            <artifactId>microservice-common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-auth-common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-auth-oauth2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-auth-jwt</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-mongo-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-codegen</artifactId>
        </dependency>
        <!-- RxRedux -->
        <dependency>
            <groupId>com.freeletics.rxredux</groupId>
            <artifactId>rxredux</artifactId>
            <version>1.0.1</version>
        </dependency>
        <!-- BPMN Engine -->
        <dependency>
            <groupId>org.flowable</groupId>
            <artifactId>flowable-engine</artifactId>
            <version>${flowable.version}</version>
        </dependency>
        <!--
                <dependency>
                    <groupId>org.flowable</groupId>
                    <artifactId>flowable-idm-engine</artifactId>
                    <version>6.4.0</version>
                </dependency>
        -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
        </dependency>
        <!-- Log4j2 logging -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
    </dependencies>
    <build>
        <resources>
            <!-- 1. copy unfiltered resources -->
            <!-- 1.1 copy ROOT/assets/**/* into deploy-bundle/assets -->
            <resource>
                <directory>src/main/deploy-bundle/web/ROOT/assets</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
                <targetPath>../deploy-bundle/web/assets</targetPath>
            </resource>
            <!-- 1.2 copy all remaining resources except those to be filtered -->
            <resource>
                <directory>src/main/deploy-bundle</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>conf/config.json</exclude>
                    <exclude>web/assets/conf/*.json</exclude>
                    <exclude>web/assets/swagger/*.json</exclude>
                    <exclude>web/swagger-ui/swagger.json</exclude>
                    <exclude>web/ROOT/**/index.html</exclude>
                    <exclude>web/ROOT/assets/**/*</exclude>
                </excludes>
                <targetPath>../deploy-bundle</targetPath>
            </resource>
            <!-- 1.3 exclude cluster.xml from standard copy (it needs to be filtered) -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>cluster.xml</exclude>
                </excludes>
            </resource>
            <!-- 2. copy filtered resources -->
            <!-- 2.1 filter deploy-bundle resources -->
            <resource>
                <directory>src/main/deploy-bundle</directory>
                <filtering>true</filtering>
                <includes>
                    <include>conf/config.json</include>
                    <include>web/assets/conf/*.json</include>
                    <include>web/assets/swagger/*.json</include>
                    <include>web/swagger-ui/swagger.json</include>
                    <include>web/ROOT/**/index.html</include>
                </includes>
                <targetPath>../deploy-bundle</targetPath>
            </resource>
            <!-- 2.1 filter cluster.xml -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>cluster.xml</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- 
            <plugin><artifactId>maven-compiler-plugin</artifactId><configuration><debug>${cpd.develop}</debug><debugLevel>lines,vars,source</debugLevel></configuration></plugin>
 -->
            <plugin>
                <!-- copy the cluster configuration -->
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <!-- plugin to create a `fat-jar` -->
                <artifactId>maven-shade-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <!--                 <executions>
                                    <execution>
                                        <goals>
                                            <goal>java</goal>
                                        </goals>
                                    </execution>
                                </executions>
                 -->
                <configuration>
                    <mainClass>it.beng.microservice.common.Launcher</mainClass>
                    <arguments>
                        <argument>run</argument>
                        <argument>it.beng.modeler.microservice.ModelerConfigVerticle</argument>
                    </arguments>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>1.0.0</version>
                    <executions>
                        <execution>
                            <id>read-properties</id>
                            <phase>initialize</phase>
                            <goals>
                                <goal>read-project-properties</goal>
                            </goals>
                            <configuration>
                                <files>
                                    <file>${config.properties.file}</file>
                                </files>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>